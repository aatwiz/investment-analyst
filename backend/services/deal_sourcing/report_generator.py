"""
Daily Deals Report Generator
Creates formatted reports in DOCX and PDF formats

Generates professional investment deal reports with:
- Header with date and criteria
- Deal cards with all relevant information
- Risk flags and signals
- Source attribution
"""

from typing import Dict, Any, List
from datetime import datetime
from io import BytesIO
from loguru import logger

try:
    from docx import Document
    from docx.shared import Inches, Pt, RGBColor
    from docx.enum.text import WD_ALIGN_PARAGRAPH
    HAS_DOCX = True
except ImportError:
    HAS_DOCX = False
    logger.warning("python-docx not installed. Install with: pip install python-docx")

from services.deal_sourcing.discovery_engine import DiscoveredDeal


class DealReportGenerator:
    """Generate formatted deal reports"""
    
    def __init__(self):
        if not HAS_DOCX:
            logger.error("python-docx is required for report generation")
    
    def generate_docx(self, report_data: Dict[str, Any]) -> BytesIO:
        """
        Generate a DOCX report from deal data
        
        Args:
            report_data: Report data from DealDiscoveryEngine.generate_daily_report()
            
        Returns:
            BytesIO buffer containing the DOCX file
        """
        if not HAS_DOCX:
            raise ImportError("python-docx is required. Install with: pip install python-docx")
        
        logger.info("Generating DOCX report")
        
        # Create document
        doc = Document()
        
        # Set default font
        style = doc.styles['Normal']
        style.font.name = 'Arial'
        style.font.size = Pt(11)
        
        # Title
        title = doc.add_heading('Daily Potential Deals Report', 0)
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Metadata
        doc.add_paragraph(f"Date: {report_data['date']}")
        doc.add_paragraph(f"Generated by: {report_data['generated_by']}")
        
        # Criteria section
        doc.add_heading('Criteria:', level=2)
        criteria = report_data['criteria']
        
        criteria_items = [
            f"Sector: {', '.join(criteria['sectors'])}",
            f"Stage: {', '.join(criteria['stages'])}",
            f"Revenue: {criteria['revenue_range']}",
            f"Geography: {', '.join(criteria['geographies'])}",
            f"Signal Sources: {', '.join(criteria['signal_sources'])}"
        ]
        
        for item in criteria_items:
            p = doc.add_paragraph(item)
            p.style = 'List Bullet'
        
        doc.add_paragraph()  # Spacing
        
        # Deals section
        deals: List[DiscoveredDeal] = report_data['deals']
        
        for i, deal in enumerate(deals, 1):
            # Deal heading with emoji
            heading = doc.add_heading(f'🔍 {i}. {deal.company_name}', level=2)
            
            # Deal details
            self._add_deal_details(doc, deal)
            
            # Add spacing between deals
            doc.add_paragraph()
        
        # Summary footer
        doc.add_page_break()
        doc.add_heading('Report Summary', level=1)
        doc.add_paragraph(f"Total Deals Analyzed: {report_data['deal_count']}")
        doc.add_paragraph(f"Report Generated: {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}")
        
        # Save to BytesIO
        buffer = BytesIO()
        doc.save(buffer)
        buffer.seek(0)
        
        logger.info("DOCX report generated successfully")
        return buffer
    
    def _add_deal_details(self, doc: Document, deal: DiscoveredDeal):
        """Add deal details to document"""
        
        # Sector and Stage
        doc.add_paragraph(f"• Sector: {deal.sector}")
        doc.add_paragraph(f"• Stage: {deal.stage}")
        
        # Funding information
        if deal.funding_round and deal.funding_amount:
            funding_text = f"• Funding Round: {deal.funding_round}"
            if deal.lead_investor:
                funding_text += f" led by {deal.lead_investor}"
            if deal.funding_amount:
                funding_text += f" (${self._format_amount(deal.funding_amount)})"
            doc.add_paragraph(funding_text)
        
        # Revenue
        if deal.revenue:
            revenue_text = f"• Revenue: Estimated ${self._format_amount(deal.revenue)} ARR"
            doc.add_paragraph(revenue_text)
        
        # Location
        if deal.location:
            doc.add_paragraph(f"• Location: {deal.location}")
        
        # Key signals
        if deal.key_signals:
            signals_text = "• Key Signal: " + "; ".join(deal.key_signals)
            doc.add_paragraph(signals_text)
        
        # Potential fit
        if deal.potential_fit:
            doc.add_paragraph(f"• Potential Fit: {deal.potential_fit}")
        
        # Risk flags
        if deal.risk_flags:
            risk_text = "• Risk Flag: " + "; ".join(deal.risk_flags)
            p = doc.add_paragraph(risk_text)
            # Make risk text red
            for run in p.runs:
                run.font.color.rgb = RGBColor(255, 0, 0)
        
        # Sources
        if deal.sources:
            doc.add_paragraph(f"• Source: {', '.join(deal.sources)}")
        
        # Website
        if deal.website:
            doc.add_paragraph(f"• Website: {deal.website}")
        
        # Description
        if deal.description:
            doc.add_paragraph(f"\nDescription: {deal.description}")
    
    def _format_amount(self, amount: float) -> str:
        """Format currency amount"""
        if amount >= 1_000_000_000:
            return f"{amount / 1_000_000_000:.1f}B"
        elif amount >= 1_000_000:
            return f"{amount / 1_000_000:.1f}M"
        elif amount >= 1_000:
            return f"{amount / 1_000:.1f}K"
        else:
            return f"{amount:,.0f}"
    
    def generate_text_report(self, report_data: Dict[str, Any]) -> str:
        """
        Generate a plain text version of the report
        
        Useful for preview or when DOCX is not available
        """
        lines = []
        
        # Header
        lines.append("=" * 60)
        lines.append("DAILY POTENTIAL DEALS REPORT")
        lines.append("=" * 60)
        lines.append(f"\nDate: {report_data['date']}")
        lines.append(f"Generated by: {report_data['generated_by']}")
        
        # Criteria
        lines.append("\nCriteria:")
        criteria = report_data['criteria']
        lines.append(f"  • Sector: {', '.join(criteria['sectors'])}")
        lines.append(f"  • Stage: {', '.join(criteria['stages'])}")
        lines.append(f"  • Revenue: {criteria['revenue_range']}")
        lines.append(f"  • Geography: {', '.join(criteria['geographies'])}")
        lines.append(f"  • Signal Sources: {', '.join(criteria['signal_sources'])}")
        
        lines.append("\n" + "=" * 60)
        
        # Deals
        deals: List[DiscoveredDeal] = report_data['deals']
        
        for i, deal in enumerate(deals, 1):
            lines.append(f"\n🔍 {i}. {deal.company_name}")
            lines.append("-" * 60)
            
            lines.append(f"  • Sector: {deal.sector}")
            lines.append(f"  • Stage: {deal.stage}")
            
            if deal.funding_round and deal.funding_amount:
                funding_text = f"  • Funding Round: {deal.funding_round}"
                if deal.lead_investor:
                    funding_text += f" led by {deal.lead_investor}"
                funding_text += f" (${self._format_amount(deal.funding_amount)})"
                lines.append(funding_text)
            
            if deal.revenue:
                lines.append(f"  • Revenue: Estimated ${self._format_amount(deal.revenue)} ARR")
            
            if deal.location:
                lines.append(f"  • Location: {deal.location}")
            
            if deal.key_signals:
                lines.append(f"  • Key Signal: {'; '.join(deal.key_signals)}")
            
            if deal.potential_fit:
                lines.append(f"  • Potential Fit: {deal.potential_fit}")
            
            if deal.risk_flags:
                lines.append(f"  • Risk Flag: {'; '.join(deal.risk_flags)}")
            
            if deal.sources:
                lines.append(f"  • Source: {', '.join(deal.sources)}")
            
            if deal.website:
                lines.append(f"  • Website: {deal.website}")
            
            if deal.description:
                lines.append(f"\n  Description: {deal.description}")
        
        # Footer
        lines.append("\n" + "=" * 60)
        lines.append(f"Total Deals: {report_data['deal_count']}")
        lines.append(f"Generated: {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}")
        lines.append("=" * 60)
        
        return "\n".join(lines)
    
    def generate_html_report(self, report_data: Dict[str, Any]) -> str:
        """
        Generate an HTML version of the report
        
        Can be used for email or web display
        """
        html_parts = []
        
        # Header
        html_parts.append("""
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body { font-family: Arial, sans-serif; max-width: 900px; margin: 0 auto; padding: 20px; }
                h1 { color: #667eea; text-align: center; }
                h2 { color: #333; border-bottom: 2px solid #667eea; padding-bottom: 5px; }
                .deal-card { background: #f8f9fa; padding: 20px; margin: 20px 0; border-radius: 10px; border-left: 4px solid #667eea; }
                .criteria { background: #e3f2fd; padding: 15px; border-radius: 5px; margin: 20px 0; }
                .risk { color: #d32f2f; font-weight: bold; }
                .signal { color: #388e3c; }
                ul { list-style-type: none; padding-left: 0; }
                li { margin: 5px 0; }
            </style>
        </head>
        <body>
        """)
        
        html_parts.append(f"<h1>Daily Potential Deals Report</h1>")
        html_parts.append(f"<p><strong>Date:</strong> {report_data['date']}</p>")
        html_parts.append(f"<p><strong>Generated by:</strong> {report_data['generated_by']}</p>")
        
        # Criteria
        html_parts.append('<div class="criteria">')
        html_parts.append('<h3>Criteria:</h3>')
        html_parts.append('<ul>')
        
        criteria = report_data['criteria']
        html_parts.append(f"<li>• <strong>Sector:</strong> {', '.join(criteria['sectors'])}</li>")
        html_parts.append(f"<li>• <strong>Stage:</strong> {', '.join(criteria['stages'])}</li>")
        html_parts.append(f"<li>• <strong>Revenue:</strong> {criteria['revenue_range']}</li>")
        html_parts.append(f"<li>• <strong>Geography:</strong> {', '.join(criteria['geographies'])}</li>")
        html_parts.append(f"<li>• <strong>Signal Sources:</strong> {', '.join(criteria['signal_sources'])}</li>")
        
        html_parts.append('</ul>')
        html_parts.append('</div>')
        
        # Deals
        deals: List[DiscoveredDeal] = report_data['deals']
        
        for i, deal in enumerate(deals, 1):
            html_parts.append(f'<div class="deal-card">')
            html_parts.append(f'<h2>🔍 {i}. {deal.company_name}</h2>')
            html_parts.append('<ul>')
            
            html_parts.append(f"<li>• <strong>Sector:</strong> {deal.sector}</li>")
            html_parts.append(f"<li>• <strong>Stage:</strong> {deal.stage}</li>")
            
            if deal.funding_round and deal.funding_amount:
                funding_text = f"<li>• <strong>Funding Round:</strong> {deal.funding_round}"
                if deal.lead_investor:
                    funding_text += f" led by {deal.lead_investor}"
                funding_text += f" (${self._format_amount(deal.funding_amount)})</li>"
                html_parts.append(funding_text)
            
            if deal.revenue:
                html_parts.append(f"<li>• <strong>Revenue:</strong> Estimated ${self._format_amount(deal.revenue)} ARR</li>")
            
            if deal.location:
                html_parts.append(f"<li>• <strong>Location:</strong> {deal.location}</li>")
            
            if deal.key_signals:
                html_parts.append(f'<li class="signal">• <strong>Key Signal:</strong> {"; ".join(deal.key_signals)}</li>')
            
            if deal.potential_fit:
                html_parts.append(f"<li>• <strong>Potential Fit:</strong> {deal.potential_fit}</li>")
            
            if deal.risk_flags:
                html_parts.append(f'<li class="risk">• <strong>Risk Flag:</strong> {"; ".join(deal.risk_flags)}</li>')
            
            if deal.sources:
                html_parts.append(f"<li>• <strong>Source:</strong> {', '.join(deal.sources)}</li>")
            
            if deal.website:
                html_parts.append(f'<li>• <strong>Website:</strong> <a href="{deal.website}">{deal.website}</a></li>')
            
            html_parts.append('</ul>')
            
            if deal.description:
                html_parts.append(f'<p><strong>Description:</strong> {deal.description}</p>')
            
            html_parts.append('</div>')
        
        # Footer
        html_parts.append(f'<p><strong>Total Deals:</strong> {report_data["deal_count"]}</p>')
        html_parts.append(f'<p><em>Generated: {datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")}</em></p>')
        
        html_parts.append('</body></html>')
        
        return ''.join(html_parts)
